name: CI & Release

# 1) Trigger on every push to main (for lint + conditional release)
on:
  push:
    branches:
      - main

jobs:
  # ───────────────────────────────────────────────────────────────
  # Job A: Ruff lint / format checks (runs on every push)
  # ───────────────────────────────────────────────────────────────
  ruff:
    name: "Lint with Ruff"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff lint
        run: python -m ruff check .

      - name: Run Ruff format check
        run: python -m ruff format . --check

  # ───────────────────────────────────────────────────────────────
  # Job B: Detect manifest.json changes
  # ───────────────────────────────────────────────────────────────
  filter_manifest:
    name: "Detect manifest.json changes"
    runs-on: ubuntu-latest
    needs: ruff   # only run if Ruff succeeded
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter for manifest.json
        id: manifest_filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            manifest:
              - 'custom_components/ha_anniversaries_export_ics/manifest.json'
  
      # Expose whether manifest.json was touched
      - name: Show filter result
        run: echo "manifest changed = ${{ steps.manifest_filter.outputs.manifest }}"

  # ───────────────────────────────────────────────────────────────
  # Job C: Release (only if manifest.json changed)
  # ───────────────────────────────────────────────────────────────
  release:
    name: "Release on version bump"
    runs-on: ubuntu-latest
    needs:
      - ruff
      - filter_manifest
    if: needs.filter_manifest.outputs.manifest == 'true'
    permissions:
      contents: write

    steps:
      # 1) Checkout (with tags) so we can check & push tags
      - name: Checkout code (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Read version from manifest.json
      - name: Get version
        id: get_version
        run: |
          VERSION=$(jq -r .version custom_components/ha_anniversaries_export_ics/manifest.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 3) Check if tag exists
      - name: Check for existing Git tag
        id: check_tag
        run: |
          TAG=${{ steps.get_version.outputs.version }}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 4) Create & push tag if missing
      - name: Create & push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG=${{ steps.get_version.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"

      # 5) ZIP the integration directory
      - name: Package integration
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          cd custom_components/ha_anniversaries_export_ics
          zip -r ha_anniversaries_export_ics.zip ./

      # 6) Create GitHub Release & upload ZIP
      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ contains( steps.get_version.outputs.version, '-' ) || contains( steps.get_version.outputs.version, 'b') || contains( steps.get_version.outputs.version, 'rc') }}
          files: custom_components/ha_anniversaries_export_ics/ha_anniversaries_export_ics.zip
